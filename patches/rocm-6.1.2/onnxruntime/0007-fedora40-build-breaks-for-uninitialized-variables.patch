From 8648b381fa28d797532e00d8fe280c68f1911bb4 Mon Sep 17 00:00:00 2001
From: Mika Laitio <lamikr@gmail.com>
Date: Fri, 14 Jun 2024 14:32:34 -0400
Subject: [PATCH 7/7] fedora40 build breaks for uninitialized variables

Signed-off-by: Mika Laitio <lamikr@gmail.com>
---
 onnxruntime/test/providers/cpu/ml/write_scores_test.cc |  6 +++---
 .../test/providers/cpu/reduction/reduction_ops_test.cc | 10 ++++------
 2 files changed, 7 insertions(+), 9 deletions(-)

diff --git a/onnxruntime/test/providers/cpu/ml/write_scores_test.cc b/onnxruntime/test/providers/cpu/ml/write_scores_test.cc
index 3bb323fd7e..5b787ee6c3 100644
--- a/onnxruntime/test/providers/cpu/ml/write_scores_test.cc
+++ b/onnxruntime/test/providers/cpu/ml/write_scores_test.cc
@@ -55,7 +55,7 @@ TEST_F(WriteScores, multiple_scores_transform_none) {
 }
 
 TEST_F(WriteScores, single_score_transform_none) {
-  InlinedVector<float> v1;
+  InlinedVector<float> v1(100);
   std::uniform_real_distribution<float> uniform_dist(-100, 100);
   v1.push_back(uniform_dist(rd));
   InlinedVector<float> v2 = v1;
@@ -70,7 +70,7 @@ TEST_F(WriteScores, single_score_transform_none) {
 
 TEST_F(WriteScores, single_score_transform_none_add_second_class) {
   for (int i = 0; i != 4; ++i) {
-    InlinedVector<float> v1;
+    InlinedVector<float> v1(100);
     std::uniform_real_distribution<float> uniform_dist(-100, 100);
     v1.push_back(uniform_dist(rd));
     InlinedVector<float> v2 = v1;
@@ -84,4 +84,4 @@ TEST_F(WriteScores, single_score_transform_none_add_second_class) {
       EXPECT_FLOAT_EQ(1 - v2[0], output_data[0]);
     }
   }
-}
\ No newline at end of file
+}
diff --git a/onnxruntime/test/providers/cpu/reduction/reduction_ops_test.cc b/onnxruntime/test/providers/cpu/reduction/reduction_ops_test.cc
index 98a65b8eff..19c5b2ab36 100644
--- a/onnxruntime/test/providers/cpu/reduction/reduction_ops_test.cc
+++ b/onnxruntime/test/providers/cpu/reduction/reduction_ops_test.cc
@@ -4242,17 +4242,15 @@ TEST(ReductionOpTest, OptimizeShapeForFastReduce_KR) {
 }
 
 TEST(ReductionOpTest, OptimizeShapeForFastReduce_KR_neg) {
-  FastReduceKind fast_kind;
   TensorShapeVector fast_shape, fast_output_shape, fast_axes;
-  TensorShapeVector expected_fast_shape, expected_fast_output_shape, expected_fast_axes;
 
   // KR - keep_dims=1
-  fast_kind = OptimizeShapeForFastReduce(
+  auto fast_kind = OptimizeShapeForFastReduce(
       TensorShapeVector{10, 11}, TensorShapeVector{-1},
       fast_shape, fast_output_shape, fast_axes, true);
-  expected_fast_shape = TensorShapeVector{10, 11};
-  expected_fast_output_shape = TensorShapeVector{10, 1};
-  expected_fast_axes = TensorShapeVector{1};
+  auto expected_fast_shape = TensorShapeVector{10, 11};
+  auto expected_fast_output_shape = TensorShapeVector{10, 1};
+  auto expected_fast_axes = TensorShapeVector{1};
   ASSERT_EQ(fast_kind, FastReduceKind::kKR);
   ASSERT_EQ(fast_shape, expected_fast_shape);
   ASSERT_EQ(fast_output_shape, expected_fast_output_shape);
-- 
2.45.2

