From 014cf53d98668c6f5db201eb26f8fba8ff82f965 Mon Sep 17 00:00:00 2001
From: Mika Laitio <lamikr@gmail.com>
Date: Fri, 24 May 2024 16:03:37 -0700
Subject: [PATCH 2/7] composable kernel patches to support additiona gpus

onnxruntime composable kernel patches to support
- gfx1010
- gfx1035
- gfx1036
- gfx1103

Signed-off-by: Mika Laitio <lamikr@gmail.com>
---
 cmake/external/composable_kernel.cmake        |   2 +-
 ...RD_DWORD-support-for-not-listed-gpus.patch |  26 +++
 ...-gfx1010-and-gfx1035-initial-support.patch |  63 +++++++
 ...0004-add-gfx1036-and-gfx1103-support.patch |  76 +++++++++
 .../composable_kernel_patches_combined.patch  | 155 ++++++++++++++++++
 5 files changed, 321 insertions(+), 1 deletion(-)
 create mode 100644 cmake/patches/composable_kernel/0001-by-default-no-3RD_DWORD-support-for-not-listed-gpus.patch
 create mode 100644 cmake/patches/composable_kernel/0003-gfx1010-and-gfx1035-initial-support.patch
 create mode 100644 cmake/patches/composable_kernel/0004-add-gfx1036-and-gfx1103-support.patch
 create mode 100644 cmake/patches/composable_kernel/composable_kernel_patches_combined.patch

diff --git a/cmake/external/composable_kernel.cmake b/cmake/external/composable_kernel.cmake
index b4e6c834c8..123bafa9b9 100644
--- a/cmake/external/composable_kernel.cmake
+++ b/cmake/external/composable_kernel.cmake
@@ -1,4 +1,4 @@
-set(PATCH ${PROJECT_SOURCE_DIR}/patches/composable_kernel/Fix_Clang_Build.patch)
+set(PATCH ${PROJECT_SOURCE_DIR}/patches/composable_kernel/composable_kernel_patches_combined.patch)
 
 include(FetchContent)
 FetchContent_Declare(composable_kernel
diff --git a/cmake/patches/composable_kernel/0001-by-default-no-3RD_DWORD-support-for-not-listed-gpus.patch b/cmake/patches/composable_kernel/0001-by-default-no-3RD_DWORD-support-for-not-listed-gpus.patch
new file mode 100644
index 0000000000..6781de399b
--- /dev/null
+++ b/cmake/patches/composable_kernel/0001-by-default-no-3RD_DWORD-support-for-not-listed-gpus.patch
@@ -0,0 +1,26 @@
+From 63f717b9e4019902a4c1e705a3a907c3b455aca2 Mon Sep 17 00:00:00 2001
+From: Mika Laitio <lamikr@gmail.com>
+Date: Tue, 19 Dec 2023 15:16:58 -0800
+Subject: [PATCH 1/4] by default no 3RD_DWORD support for not listed gpus
+
+Signed-off-by: Mika Laitio <lamikr@gmail.com>
+---
+ include/ck/ck.hpp | 2 ++
+ 1 file changed, 2 insertions(+)
+
+diff --git a/include/ck/ck.hpp b/include/ck/ck.hpp
+index 88efb0277..da5bb86c6 100644
+--- a/include/ck/ck.hpp
++++ b/include/ck/ck.hpp
+@@ -55,6 +55,8 @@
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31014000
+ #elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__) // for GPU code
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31004000
++#else
++#define CK_BUFFER_RESOURCE_3RD_DWORD -1
+ #endif
+ 
+ // FMA instruction
+-- 
+2.45.2
+
diff --git a/cmake/patches/composable_kernel/0003-gfx1010-and-gfx1035-initial-support.patch b/cmake/patches/composable_kernel/0003-gfx1010-and-gfx1035-initial-support.patch
new file mode 100644
index 0000000000..8c95fc8117
--- /dev/null
+++ b/cmake/patches/composable_kernel/0003-gfx1010-and-gfx1035-initial-support.patch
@@ -0,0 +1,63 @@
+From 7c02a14553826261d1052da5e1fb17487e15d2d4 Mon Sep 17 00:00:00 2001
+From: Mika Laitio <lamikr@gmail.com>
+Date: Fri, 24 May 2024 03:50:43 -0700
+Subject: [PATCH 3/4] gfx1010 and gfx1035 initial support
+
+- needs more testing
+
+Signed-off-by: Mika Laitio <lamikr@gmail.com>
+---
+ include/ck/ck.hpp                       | 9 ++++++---
+ include/ck/host_utility/device_prop.hpp | 3 +++
+ 2 files changed, 9 insertions(+), 3 deletions(-)
+
+diff --git a/include/ck/ck.hpp b/include/ck/ck.hpp
+index da5bb86c6..266460342 100644
+--- a/include/ck/ck.hpp
++++ b/include/ck/ck.hpp
+@@ -49,9 +49,9 @@
+ #define CK_BUFFER_RESOURCE_3RD_DWORD -1
+ #elif defined(__gfx803__) || defined(__gfx900__) || defined(__gfx906__) || defined(__gfx908__) || \
+     defined(__gfx90a__) || defined(__gfx940__) || defined(__gfx941__) ||                          \
+-    defined(__gfx942__) // for GPU code
++    defined(__gfx942__) || defined(__gfx1010__) // for GPU code
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x00020000
+-#elif defined(__gfx1030__) // for GPU code
++#elif defined(__gfx1030__) || defined(__gfx1031__) || defined(__gfx1035__) // for GPU code
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31014000
+ #elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__) // for GPU code
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31004000
+@@ -59,11 +59,14 @@
+ #define CK_BUFFER_RESOURCE_3RD_DWORD -1
+ #endif
+ 
++// whether to use assembly or rely on compiler for these instructions
++// TODO: rdna1/gfx1010 has CK_USE_AMD_V_FMAC_F32 but not CK_USE_AMD_V_DOT2_F32_F16 CK_USE_AMD_V_DOT4_I32_I8
++// TODO: check defined(__gfx1035__)
+ // FMA instruction
+ #ifndef __HIP_DEVICE_COMPILE__                   // for host code, define nothing
+ #elif defined(__gfx803__) || defined(__gfx900__) // for GPU code
+ #define CK_USE_AMD_V_MAC_F32
+-#elif defined(__gfx906__) || defined(__gfx908__) || defined(__gfx90a__) || defined(__gfx1030__) || \
++#elif defined(__gfx906__) || defined(__gfx908__) || defined(__gfx90a__) || defined(__gfx1030__) || defined(__gfx1031__) || \
+     defined(__gfx940__) || defined(__gfx941__) || defined(__gfx942__) // for GPU code
+ #define CK_USE_AMD_V_FMAC_F32
+ #define CK_USE_AMD_V_DOT2_F32_F16
+diff --git a/include/ck/host_utility/device_prop.hpp b/include/ck/host_utility/device_prop.hpp
+index e8dabc997..0908f6757 100644
+--- a/include/ck/host_utility/device_prop.hpp
++++ b/include/ck/host_utility/device_prop.hpp
+@@ -40,7 +40,10 @@ inline std::string get_device_name()
+         {"gfx804", "gfx803"},
+         {"Vega10", "gfx900"},
+         {"gfx901", "gfx900"},
++        {"navi10", "gfx1010"},
++        {"gfx1031", "gfx1030"},
+         {"10.3.0 Sienna_Cichlid 18", "gfx1030"},
++        {"Rembrandt", "gfx1035"},
+     };
+ 
+     const auto name = raw_name.substr(0, raw_name.find(':')); // str.substr(0, npos) returns str.
+-- 
+2.45.2
+
diff --git a/cmake/patches/composable_kernel/0004-add-gfx1036-and-gfx1103-support.patch b/cmake/patches/composable_kernel/0004-add-gfx1036-and-gfx1103-support.patch
new file mode 100644
index 0000000000..339b7109e5
--- /dev/null
+++ b/cmake/patches/composable_kernel/0004-add-gfx1036-and-gfx1103-support.patch
@@ -0,0 +1,76 @@
+From d3a76a05875c148f25985ee08c54099c69b75edb Mon Sep 17 00:00:00 2001
+From: Mika Laitio <lamikr@gmail.com>
+Date: Sat, 13 Jul 2024 21:35:33 -0400
+Subject: [PATCH 4/4] add gfx1036 and gfx1103 support
+
+Signed-off-by: Mika Laitio <lamikr@gmail.com>
+---
+ include/ck/ck.hpp                       | 12 +++++++-----
+ include/ck/host_utility/device_prop.hpp |  7 ++++++-
+ 2 files changed, 13 insertions(+), 6 deletions(-)
+
+diff --git a/include/ck/ck.hpp b/include/ck/ck.hpp
+index 266460342..379261ba3 100644
+--- a/include/ck/ck.hpp
++++ b/include/ck/ck.hpp
+@@ -49,11 +49,11 @@
+ #define CK_BUFFER_RESOURCE_3RD_DWORD -1
+ #elif defined(__gfx803__) || defined(__gfx900__) || defined(__gfx906__) || defined(__gfx908__) || \
+     defined(__gfx90a__) || defined(__gfx940__) || defined(__gfx941__) ||                          \
+-    defined(__gfx942__) || defined(__gfx1010__) // for GPU code
++    defined(__gfx942__) // for GPU code
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x00020000
+-#elif defined(__gfx1030__) || defined(__gfx1031__) || defined(__gfx1035__) // for GPU code
++#elif defined(__gfx1010__) || defined(__gfx1030__) || defined(__gfx1031__) || defined(__gfx1035__) || defined(__gfx1036__) // for GPU code
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31014000
+-#elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__) // for GPU code
++#elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__) || defined(__gfx1103__) // for GPU code
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31004000
+ #else
+ #define CK_BUFFER_RESOURCE_3RD_DWORD -1
+@@ -66,12 +66,14 @@
+ #ifndef __HIP_DEVICE_COMPILE__                   // for host code, define nothing
+ #elif defined(__gfx803__) || defined(__gfx900__) // for GPU code
+ #define CK_USE_AMD_V_MAC_F32
++#elif defined(__gfx1010__)
++#define CK_USE_AMD_V_FMAC_F32
+ #elif defined(__gfx906__) || defined(__gfx908__) || defined(__gfx90a__) || defined(__gfx1030__) || defined(__gfx1031__) || \
+     defined(__gfx940__) || defined(__gfx941__) || defined(__gfx942__) // for GPU code
+ #define CK_USE_AMD_V_FMAC_F32
+ #define CK_USE_AMD_V_DOT2_F32_F16
+ #define CK_USE_AMD_V_DOT4_I32_I8
+-#elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__)
++#elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__) || defined(__gfx1103__)
+ #define CK_USE_AMD_V_FMAC_F32
+ #define CK_USE_AMD_V_DOT2_F32_F16
+ #define CK_USE_AMD_V_DOT4_I32_I8_GFX11
+@@ -96,7 +98,7 @@
+ // WMMA instruction
+ #ifndef __HIP_DEVICE_COMPILE__ // for host code
+ #define CK_USE_AMD_WMMA
+-#elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__) // for GPU code
++#elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__) || defined(__gfx1103__) // for GPU code
+ #define CK_USE_AMD_WMMA
+ #endif
+ 
+diff --git a/include/ck/host_utility/device_prop.hpp b/include/ck/host_utility/device_prop.hpp
+index 0908f6757..294a60f9a 100644
+--- a/include/ck/host_utility/device_prop.hpp
++++ b/include/ck/host_utility/device_prop.hpp
+@@ -43,7 +43,12 @@ inline std::string get_device_name()
+         {"navi10", "gfx1010"},
+         {"gfx1031", "gfx1030"},
+         {"10.3.0 Sienna_Cichlid 18", "gfx1030"},
+-        {"Rembrandt", "gfx1035"},
++        {"rembrandt", "gfx1035"},
++        {"raphael", "gfx1036"},
++        {"navi31", "gfx1100"},
++        {"navi32", "gfx1101"},
++        {"navi33", "gfx1102"},
++        {"phoenix", "gfx1103"},
+     };
+ 
+     const auto name = raw_name.substr(0, raw_name.find(':')); // str.substr(0, npos) returns str.
+-- 
+2.45.2
+
diff --git a/cmake/patches/composable_kernel/composable_kernel_patches_combined.patch b/cmake/patches/composable_kernel/composable_kernel_patches_combined.patch
new file mode 100644
index 0000000000..6ca90805e7
--- /dev/null
+++ b/cmake/patches/composable_kernel/composable_kernel_patches_combined.patch
@@ -0,0 +1,155 @@
+diff -Naur composable_kernel_orig_5356c4a943/CMakeLists.txt composable_kernel/CMakeLists.txt
+--- composable_kernel_orig_5356c4a943/CMakeLists.txt	2023-11-13 12:16:04.000000000 -0500
++++ composable_kernel/CMakeLists.txt	2024-07-14 17:26:06.779625019 -0400
+@@ -19,7 +19,7 @@
+ 
+ set(version 1.1.0)
+ # Check support for CUDA/HIP in Cmake
+-project(composable_kernel VERSION ${version})
++project(composable_kernel VERSION ${version} LANGUAGES CXX HIP)
+ 
+ list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
+ 
+@@ -173,27 +173,6 @@
+ set(CMAKE_CXX_EXTENSIONS OFF)
+ message("CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}")
+ 
+-## OpenMP
+-if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+-	# workaround issue hipcc in rocm3.5 cannot find openmp
+-	set(OpenMP_CXX "${CMAKE_CXX_COMPILER}")
+-	set(OpenMP_CXX_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
+-	set(OpenMP_CXX_LIB_NAMES "libomp" "libgomp" "libiomp5")
+-	set(OpenMP_libomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
+-	set(OpenMP_libgomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
+-	set(OpenMP_libiomp5_LIBRARY ${OpenMP_CXX_LIB_NAMES})
+-else()
+-	find_package(OpenMP REQUIRED)
+-endif()
+-
+-message("OpenMP_CXX_LIB_NAMES: ${OpenMP_CXX_LIB_NAMES}")
+-message("OpenMP_gomp_LIBRARY: ${OpenMP_gomp_LIBRARY}")
+-message("OpenMP_pthread_LIBRARY: ${OpenMP_pthread_LIBRARY}")
+-message("OpenMP_CXX_FLAGS: ${OpenMP_CXX_FLAGS}")
+-
+-link_libraries(${OpenMP_gomp_LIBRARY})
+-link_libraries(${OpenMP_pthread_LIBRARY})
+-
+ ## HIP
+ find_package(HIP REQUIRED)
+ # Override HIP version in config.h, if necessary.
+@@ -215,8 +194,6 @@
+     message(STATUS "CK_HIP_VERSION_PATCH overriden with ${CK_OVERRIDE_HIP_VERSION_PATCH}")
+ endif()
+ message(STATUS "Build with HIP ${HIP_VERSION}")
+-link_libraries(hip::device)
+-add_compile_definitions(__HIP_PLATFORM_HCC__=1)
+ 
+ ## tidy
+ include(EnableCompilerWarnings)
+@@ -376,7 +353,9 @@
+     add_compile_options(-Werror -Weverything)
+ endif()
+ #add flags to reduce the size of binaries
+-add_compile_options(-Oz -flto=thin)
++# -flto requires ORT to use a linker that support LTO and -flto flag shoud be passed to linker together.
++# add_compile_options(-Oz -flto=thin)
++add_compile_options(-Oz)
+ message("CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
+ 
+ add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure -C ${CMAKE_CFG_INTDIR})
+@@ -482,11 +461,3 @@
+ 
+ set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
+ set(CPACK_RPM_PACKAGE_LICENSE "MIT")
+-
+-rocm_create_package(
+-    NAME composablekernel
+-    DESCRIPTION "High Performance Composable Kernel for AMD GPUs"
+-    MAINTAINER "MIOpen Kernels Dev Team <dl.MIOpen@amd.com>"
+-    LDCONFIG
+-    HEADER_ONLY
+-)
+diff -Naur composable_kernel_orig_5356c4a943/include/ck/ck.hpp composable_kernel/include/ck/ck.hpp
+--- composable_kernel_orig_5356c4a943/include/ck/ck.hpp	2023-11-13 12:16:04.000000000 -0500
++++ composable_kernel/include/ck/ck.hpp	2024-07-14 17:24:43.730836771 -0400
+@@ -51,22 +51,29 @@
+     defined(__gfx90a__) || defined(__gfx940__) || defined(__gfx941__) ||                          \
+     defined(__gfx942__) // for GPU code
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x00020000
+-#elif defined(__gfx1030__) // for GPU code
++#elif defined(__gfx1010__) || defined(__gfx1030__) || defined(__gfx1031__) || defined(__gfx1035__) || defined(__gfx1036__) // for GPU code
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31014000
+-#elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__) // for GPU code
++#elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__) || defined(__gfx1103__) // for GPU code
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31004000
++#else
++#define CK_BUFFER_RESOURCE_3RD_DWORD -1
+ #endif
+ 
++// whether to use assembly or rely on compiler for these instructions
++// TODO: rdna1/gfx1010 has CK_USE_AMD_V_FMAC_F32 but not CK_USE_AMD_V_DOT2_F32_F16 CK_USE_AMD_V_DOT4_I32_I8
++// TODO: check defined(__gfx1035__)
+ // FMA instruction
+ #ifndef __HIP_DEVICE_COMPILE__                   // for host code, define nothing
+ #elif defined(__gfx803__) || defined(__gfx900__) // for GPU code
+ #define CK_USE_AMD_V_MAC_F32
+-#elif defined(__gfx906__) || defined(__gfx908__) || defined(__gfx90a__) || defined(__gfx1030__) || \
++#elif defined(__gfx1010__)
++#define CK_USE_AMD_V_FMAC_F32
++#elif defined(__gfx906__) || defined(__gfx908__) || defined(__gfx90a__) || defined(__gfx1030__) || defined(__gfx1031__) || \
+     defined(__gfx940__) || defined(__gfx941__) || defined(__gfx942__) // for GPU code
+ #define CK_USE_AMD_V_FMAC_F32
+ #define CK_USE_AMD_V_DOT2_F32_F16
+ #define CK_USE_AMD_V_DOT4_I32_I8
+-#elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__)
++#elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__) || defined(__gfx1103__)
+ #define CK_USE_AMD_V_FMAC_F32
+ #define CK_USE_AMD_V_DOT2_F32_F16
+ #define CK_USE_AMD_V_DOT4_I32_I8_GFX11
+@@ -91,7 +98,7 @@
+ // WMMA instruction
+ #ifndef __HIP_DEVICE_COMPILE__ // for host code
+ #define CK_USE_AMD_WMMA
+-#elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__) // for GPU code
++#elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__) || defined(__gfx1103__) // for GPU code
+ #define CK_USE_AMD_WMMA
+ #endif
+ 
+diff -Naur composable_kernel_orig_5356c4a943/include/ck/host_utility/device_prop.hpp composable_kernel/include/ck/host_utility/device_prop.hpp
+--- composable_kernel_orig_5356c4a943/include/ck/host_utility/device_prop.hpp	2023-11-13 12:16:04.000000000 -0500
++++ composable_kernel/include/ck/host_utility/device_prop.hpp	2024-07-14 17:24:43.730836771 -0400
+@@ -40,7 +40,15 @@
+         {"gfx804", "gfx803"},
+         {"Vega10", "gfx900"},
+         {"gfx901", "gfx900"},
++        {"navi10", "gfx1010"},
++        {"gfx1031", "gfx1030"},
+         {"10.3.0 Sienna_Cichlid 18", "gfx1030"},
++        {"rembrandt", "gfx1035"},
++        {"raphael", "gfx1036"},
++        {"navi31", "gfx1100"},
++        {"navi32", "gfx1101"},
++        {"navi33", "gfx1102"},
++        {"phoenix", "gfx1103"},
+     };
+ 
+     const auto name = raw_name.substr(0, raw_name.find(':')); // str.substr(0, npos) returns str.
+diff -Naur composable_kernel_orig_5356c4a943/library/src/tensor_operation_instance/gpu/CMakeLists.txt composable_kernel/library/src/tensor_operation_instance/gpu/CMakeLists.txt
+--- composable_kernel_orig_5356c4a943/library/src/tensor_operation_instance/gpu/CMakeLists.txt	2023-11-13 12:16:04.000000000 -0500
++++ composable_kernel/library/src/tensor_operation_instance/gpu/CMakeLists.txt	2024-07-14 17:26:06.779625019 -0400
+@@ -44,8 +44,14 @@
+     endforeach()
+     #only continue if there are some source files left on the list
+     if(ARGN)
++        set_source_files_properties(${ARGN} PROPERTIES LANGUAGE HIP)
+         add_library(${INSTANCE_NAME} OBJECT ${ARGN})
++        # Always disable debug symbol and C debug assert due to
++        # - Linker error: ... relocation truncated to fit ..., caused by object files to be linked are too huge.
++        # - https://github.com/ROCmSoftwarePlatform/composable_kernel/issues/622
++        target_compile_options(${INSTANCE_NAME} PRIVATE -g0 -DNDEBUG)
+         target_compile_features(${INSTANCE_NAME} PUBLIC)
++        target_compile_definitions(${INSTANCE_NAME} PRIVATE "__HIP_PLATFORM_AMD__=1" "__HIP_PLATFORM_HCC__=1")
+         set_target_properties(${INSTANCE_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)
+         clang_tidy_check(${INSTANCE_NAME})
+         set(result 0)
-- 
2.45.2

