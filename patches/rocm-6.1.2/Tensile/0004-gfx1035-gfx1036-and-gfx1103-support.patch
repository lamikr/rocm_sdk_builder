From 73507ebe45ae8a9e5f47197ae5e4aa77c560a7a6 Mon Sep 17 00:00:00 2001
From: Mika Laitio <lamikr@gmail.com>
Date: Sat, 13 Jul 2024 15:50:11 -0400
Subject: [PATCH 4/4] gfx1035,gfx1036 and gfx1103 support

Signed-off-by: Mika Laitio <lamikr@gmail.com>
---
 Tensile/AsmCaps.py                            | 84 +++++++++++++++++++
 Tensile/Common.py                             | 12 +--
 Tensile/SolutionLibrary.py                    |  4 +-
 Tensile/Source/CMakeLists.txt                 |  4 +-
 Tensile/Source/lib/include/Tensile/AMDGPU.hpp | 20 ++++-
 .../include/Tensile/PlaceholderLibrary.hpp    |  6 ++
 .../Tensile/Serialization/Predicates.hpp      |  2 +
 .../preload_kernel_arguments_always_half.yaml |  5 +-
 pytest.ini                                    |  4 +
 9 files changed, 128 insertions(+), 13 deletions(-)

diff --git a/Tensile/AsmCaps.py b/Tensile/AsmCaps.py
index ef93f53f..4ba97887 100644
--- a/Tensile/AsmCaps.py
+++ b/Tensile/AsmCaps.py
@@ -629,6 +629,48 @@ CACHED_ASM_CAPS = \
               'v_mad_mix_f32': False,
               'v_pk_fma_f16': True,
               'v_pk_fmac_f16': False},
+ (10, 3, 6): {'HasAddLshl': True,
+              'HasAtomicAdd': False,
+              'HasDirectToLdsDest': False,
+              'HasDirectToLdsNoDest': True,
+              'HasExplicitCO': True,
+              'HasExplicitNC': True,
+              'HasGLCModifier': True,
+              'HasLshlOr': True,
+              'HasMFMA': False,
+              'HasMFMA_b8': False,
+              'HasMFMA_bf16_1k': False,
+              'HasMFMA_bf16_original': False,
+              'HasMFMA_constSrc': False,
+              'HasMFMA_f64': False,
+              'HasMFMA_f8': False,
+              'HasMFMA_i8_908': False,
+              'HasMFMA_i8_940': False,
+              'HasMFMA_vgpr': False,
+              'HasMFMA_xf32': False,
+              'HasSMulHi': True,
+              'HasWMMA': False,
+              'KernargPreloading': False,
+              'MaxLgkmcnt': 15,
+              'MaxVmcnt': 63,
+              'SupportedISA': True,
+              'SupportedSource': True,
+              'VOP3v_dot4_i32_i8': True,
+              'v_dot2_f32_f16': True,
+              'v_dot2c_f32_f16': True,
+              'v_dot4_i32_i8': False,
+              'v_dot4c_i32_i8': True,
+              'v_fma_f16': True,
+              'v_fma_f32': True,
+              'v_fma_f64': True,
+              'v_fma_mix_f32': True,
+              'v_fmac_f16': False,
+              'v_fmac_f32': True,
+              'v_mac_f16': False,
+              'v_mac_f32': False,
+              'v_mad_mix_f32': False,
+              'v_pk_fma_f16': True,
+              'v_pk_fmac_f16': False},
  (11, 0, 0): {'HasAddLshl': True,
               'HasAtomicAdd': True,
               'HasDirectToLdsDest': False,
@@ -714,6 +756,48 @@ CACHED_ASM_CAPS = \
               'v_pk_fma_f16': True,
               'v_pk_fmac_f16': False},
  (11, 0, 2): {'HasAddLshl': True,
+              'HasAtomicAdd': True,
+              'HasDirectToLdsDest': False,
+              'HasDirectToLdsNoDest': False,
+              'HasExplicitCO': True,
+              'HasExplicitNC': True,
+              'HasGLCModifier': True,
+              'HasLshlOr': True,
+              'HasMFMA': False,
+              'HasMFMA_b8': False,
+              'HasMFMA_bf16_1k': False,
+              'HasMFMA_bf16_original': False,
+              'HasMFMA_constSrc': False,
+              'HasMFMA_f64': False,
+              'HasMFMA_f8': False,
+              'HasMFMA_i8_908': False,
+              'HasMFMA_i8_940': False,
+              'HasMFMA_vgpr': False,
+              'HasMFMA_xf32': False,
+              'HasSMulHi': True,
+              'HasWMMA': True,
+              'KernargPreloading': False,
+              'MaxLgkmcnt': 15,
+              'MaxVmcnt': 63,
+              'SupportedISA': True,
+              'SupportedSource': True,
+              'VOP3v_dot4_i32_i8': False,
+              'v_dot2_f32_f16': True,
+              'v_dot2c_f32_f16': True,
+              'v_dot4_i32_i8': False,
+              'v_dot4c_i32_i8': False,
+              'v_fma_f16': True,
+              'v_fma_f32': True,
+              'v_fma_f64': True,
+              'v_fma_mix_f32': True,
+              'v_fmac_f16': False,
+              'v_fmac_f32': True,
+              'v_mac_f16': False,
+              'v_mac_f32': False,
+              'v_mad_mix_f32': False,
+              'v_pk_fma_f16': True,
+              'v_pk_fmac_f16': False},
+ (11, 0, 3): {'HasAddLshl': True,
               'HasAtomicAdd': True,
               'HasDirectToLdsDest': False,
               'HasDirectToLdsNoDest': False,
diff --git a/Tensile/Common.py b/Tensile/Common.py
index 9b24aee7..3920717e 100644
--- a/Tensile/Common.py
+++ b/Tensile/Common.py
@@ -227,8 +227,8 @@ globalParameters["MaxFileName"] = 64              # If a file name would be long
 globalParameters["SupportedISA"] = [(8,0,3),
                                     (9,0,0), (9,0,6), (9,0,8), (9,0,10),
                                     (9,4,0), (9,4,1), (9,4,2),
-                                    (10,1,0), (10,1,1), (10,1,2), (10,3,0), (10,3,1), (10,3,5),
-                                    (11,0,0), (11,0,1), (11,0,2)] # assembly kernels writer supports these architectures
+                                    (10,1,0), (10,1,1), (10,1,2), (10,3,0), (10,3,1), (10,3,5), (10,3,6),
+                                    (11,0,0), (11,0,1), (11,0,2), (11,0,3)] # assembly kernels writer supports these architectures
 
 globalParameters["CleanupBuildFiles"] = False                     # cleanup build files (e.g. kernel assembly) once no longer needed
 globalParameters["GenerateManifestAndExit"] = False               # Output manifest file with list of expected library objects and exit
@@ -305,8 +305,8 @@ architectureMap = {
   'gfx941':'aquavanjaram941', 'gfx941:xnack+':'aquavanjaram941', 'gfx941:xnack-':'aquavanjaram941',
   'gfx942':'aquavanjaram942', 'gfx942:xnack+':'aquavanjaram942', 'gfx942:xnack-':'aquavanjaram942',
   'gfx1010':'navi10', 'gfx1011':'navi12', 'gfx1012':'navi14',
-  'gfx1030':'navi21', 'gfx1031':'navi22', 'gfx1032':'navi23', 'gfx1034':'navi24', 'gfx1035':'rembrandt',
-  'gfx1100':'navi31', 'gfx1101':'navi32', 'gfx1102':'navi33'
+  'gfx1030':'navi21', 'gfx1031':'navi22', 'gfx1032':'navi23', 'gfx1034':'navi24', 'gfx1035':'rembrandt', 'gfx1036':'raphael',
+  'gfx1100':'navi31', 'gfx1101':'navi32', 'gfx1102':'navi33', 'gfx1103':'phoenix'
 }
 
 def getArchitectureName(gfxName):
@@ -2291,8 +2291,8 @@ def assignGlobalParameters( config ):
       globalParameters["CurrentISA"] = (9,0,6)
       printWarning("Failed to detect ISA so forcing (gfx906) on windows")
   if globalParameters["CurrentISA"] == (9,4,1) or globalParameters["CurrentISA"] == (9,4,2) or globalParameters["CurrentISA"] == (11,0,0) or \
-     globalParameters["CurrentISA"] == (11,0,1) or globalParameters["CurrentISA"] == (11,0,2):
-    printWarning("HardwareMonitor currently disabled for gfx941/942 or gfx1100/gfx1101/gfx1102")
+     globalParameters["CurrentISA"] == (11,0,1) or globalParameters["CurrentISA"] == (11,0,2) or globalParameters["CurrentISA"] == (11,0,3):
+    printWarning("HardwareMonitor currently disabled for gfx941/942 or gfx1100/gfx1101/gfx1102/gfx1103")
     globalParameters["HardwareMonitor"] = False
 
   # For ubuntu platforms, call dpkg to grep the version of hip-clang.  This check is platform specific, and in the future
diff --git a/Tensile/SolutionLibrary.py b/Tensile/SolutionLibrary.py
index 66f2e86a..9953aff9 100644
--- a/Tensile/SolutionLibrary.py
+++ b/Tensile/SolutionLibrary.py
@@ -255,8 +255,8 @@ class MasterSolutionLibrary:
     def ArchitectureIndexMap(cls, architectureName):
         # 'fallback', 'gfx803', 'gfx900', 'gfx906', 'gfx908', 'gfx90a',
         # 'gfx940', 'gfx941', 'gfx942', 'gfx1010', 'gfx1011', 'gfx1012',
-        # 'gfx1030', 'gfx1031', 'gfx1032', 'gfx1034', 'gfx1035', 'gfx1100',
-        # 'gfx1101', 'gfx1102'
+        # 'gfx1030', 'gfx1031', 'gfx1032', 'gfx1034', 'gfx1035', 'gfx1036',
+        # 'gfx1100', 'gfx1101', 'gfx1102', 'gfx1103'
         archval = -1
         if architectureName == "fallback":
             archval = 0
diff --git a/Tensile/Source/CMakeLists.txt b/Tensile/Source/CMakeLists.txt
index e973a9ed..ecd18dd5 100644
--- a/Tensile/Source/CMakeLists.txt
+++ b/Tensile/Source/CMakeLists.txt
@@ -51,9 +51,9 @@ if(NOT DEFINED CXX_VERSION_STRING)
 endif()
 
 if(CMAKE_CXX_COMPILER STREQUAL "hipcc")
-  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx906:xnack- gfx908:xnack- gfx90a:xnack- gfx1010 gfx1011 gfx1012 gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1100 gfx1101 gfx1102 CACHE STRING "GPU architectures")
+  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx906:xnack- gfx908:xnack- gfx90a:xnack- gfx1010 gfx1011 gfx1012 gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1036 gfx1100 gfx1101 gfx1102 gfx1103 CACHE STRING "GPU architectures")
 else()
-  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx906 gfx908 gfx90a gfx1010 gfx1011 gfx1012 gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1100 gfx1101 gfx1102 CACHE STRING "GPU architectures")
+  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx906 gfx908 gfx90a gfx1010 gfx1011 gfx1012 gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1036 gfx1100 gfx1101 gfx1102 gfx1103 CACHE STRING "GPU architectures")
 endif()
 
 include(CMakeDependentOption)
diff --git a/Tensile/Source/lib/include/Tensile/AMDGPU.hpp b/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
index c845d749..d1c673a1 100644
--- a/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
+++ b/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
@@ -71,9 +71,11 @@ namespace Tensile
             gfx1032 = 1032,
             gfx1034 = 1034,
             gfx1035 = 1035,
+            gfx1036 = 1036,
             gfx1100 = 1100,
             gfx1101 = 1101,
-            gfx1102 = 1102
+            gfx1102 = 1102,
+            gfx1103 = 1103
         };
 
         static std::string toString(Processor p)
@@ -112,12 +114,16 @@ namespace Tensile
                 return "gfx1034";
             case AMDGPU::Processor::gfx1035:
                 return "gfx1035";
+            case AMDGPU::Processor::gfx1036:
+                return "gfx1036";
             case AMDGPU::Processor::gfx1100:
                 return "gfx1100";
             case AMDGPU::Processor::gfx1101:
                 return "gfx1101";
             case AMDGPU::Processor::gfx1102:
                 return "gfx1102";
+            case AMDGPU::Processor::gfx1103:
+                return "gfx1103";
             }
             return "";
         }
@@ -172,6 +178,14 @@ namespace Tensile
             {
                 return AMDGPU::Processor::gfx1030;
             }
+            else if(deviceString.find("gfx1035") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1035;
+            }
+            else if(deviceString.find("gfx1036") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1036;
+            }
             else if(deviceString.find("gfx1100") != std::string::npos)
             {
                 return AMDGPU::Processor::gfx1100;
@@ -184,6 +198,10 @@ namespace Tensile
             {
                 return AMDGPU::Processor::gfx1102;
             }
+            else if(deviceString.find("gfx1103") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1103;
+            }
             else
             {
                 return static_cast<AMDGPU::Processor>(0);
diff --git a/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp b/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
index 10898ec2..38e99640 100644
--- a/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
+++ b/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
@@ -55,9 +55,11 @@ namespace Tensile
         gfx1032,
         gfx1034,
         gfx1035,
+        gfx1036,
         gfx1100,
         gfx1101,
         gfx1102,
+        gfx1103,
         All
     };
 
@@ -100,12 +102,16 @@ namespace Tensile
             return "TensileLibrary_*_gfx1034";
         case LazyLoadingInit::gfx1035:
             return "TensileLibrary_*_gfx1035";
+        case LazyLoadingInit::gfx1036:
+            return "TensileLibrary_*_gfx1036";
         case LazyLoadingInit::gfx1100:
             return "TensileLibrary_*_gfx1100";
         case LazyLoadingInit::gfx1101:
             return "TensileLibrary_*_gfx1101";
         case LazyLoadingInit::gfx1102:
             return "TensileLibrary_*_gfx1102";
+        case LazyLoadingInit::gfx1103:
+            return "TensileLibrary_*_gfx1103";
         case LazyLoadingInit::None:
             return "";
         }
diff --git a/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp b/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
index 87fc0d24..b52c9d38 100644
--- a/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
+++ b/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
@@ -229,9 +229,11 @@ namespace Tensile
                 iot::enumCase(io, value, "gfx1032", AMDGPU::Processor::gfx1032);
                 iot::enumCase(io, value, "gfx1034", AMDGPU::Processor::gfx1034);
                 iot::enumCase(io, value, "gfx1035", AMDGPU::Processor::gfx1035);
+                iot::enumCase(io, value, "gfx1036", AMDGPU::Processor::gfx1036);
                 iot::enumCase(io, value, "gfx1100", AMDGPU::Processor::gfx1100);
                 iot::enumCase(io, value, "gfx1101", AMDGPU::Processor::gfx1101);
                 iot::enumCase(io, value, "gfx1102", AMDGPU::Processor::gfx1102);
+                iot::enumCase(io, value, "gfx1103", AMDGPU::Processor::gfx1103);
             }
         };
 
diff --git a/Tensile/Tests/pre_checkin/preload_kernel_arguments_always_half.yaml b/Tensile/Tests/pre_checkin/preload_kernel_arguments_always_half.yaml
index 7b916d94..825100b0 100644
--- a/Tensile/Tests/pre_checkin/preload_kernel_arguments_always_half.yaml
+++ b/Tensile/Tests/pre_checkin/preload_kernel_arguments_always_half.yaml
@@ -2,8 +2,9 @@ TestParameters:
   marks: [skip-gfx900, skip-gfx906, skip-gfx908,
           skip-gfx1010, skip-gfx1011, skip-gfx1012,
           skip-gfx1030, skip-gfx1031, skip-gfx1032,
-          skip-gfx1034, skip-gfx1035, skip-gfx1100,
-          skip-gfx1101, skip-gfx1102]
+          skip-gfx1034, skip-gfx1035, skip-gfx1036,
+          skip-gfx1100, skip-gfx1101, skip-gfx1102,
+          skip-gfx1103]
 
 GlobalParameters:
   MinimumRequiredVersion: 4.2.0
diff --git a/pytest.ini b/pytest.ini
index 2dc9a329..f16a65e3 100644
--- a/pytest.ini
+++ b/pytest.ini
@@ -104,9 +104,11 @@ markers =
  xfail-gfx1032: architecture
  xfail-gfx1034: architecture
  xfail-gfx1035: architecture
+ xfail-gfx1036: architecture
  xfail-gfx1100: architecture
  xfail-gfx1101: architecture
  xfail-gfx1102: architecture
+ xfail-gfx1103: architecture
  skip-gfx000:  architecture
  skip-gfx900:  architecture
  skip-gfx906:  architecture
@@ -123,6 +125,8 @@ markers =
  skip-gfx1032: architecture
  skip-gfx1034: architecture
  skip-gfx1035: architecture
+ skip-gfx1036: architecture
  skip-gfx1100: architecture
  skip-gfx1101: architecture
  skip-gfx1102: architecture
+ skip-gfx1103: architecture
-- 
2.45.2

