From 53697d6e75e21d5e83d6edb24ec3c1b2598c5242 Mon Sep 17 00:00:00 2001
From: Mika Laitio <lamikr@gmail.com>
Date: Wed, 18 Sep 2024 01:59:58 -0700
Subject: [PATCH 2/3] warn instead of exit for missing metrics.xml definitions

Signed-off-by: Mika Laitio <lamikr@gmail.com>
---
 src/core/counters/metrics/metrics.h | 10 ++++++----
 src/core/metrics.h                  | 14 +++++++++-----
 2 files changed, 15 insertions(+), 9 deletions(-)

diff --git a/src/core/counters/metrics/metrics.h b/src/core/counters/metrics/metrics.h
index 08c28ff..01286b8 100644
--- a/src/core/counters/metrics/metrics.h
+++ b/src/core/counters/metrics/metrics.h
@@ -308,7 +308,7 @@ class MetricsDict {
             }
           }
           if (expr_obj) {
-#if 0
+#if 1
             std::cout << "# " << descr << std::endl;
             std::cout << name << "=" << expr_obj->String() << "\n" << std::endl;
 #endif
@@ -316,10 +316,12 @@ class MetricsDict {
             for (const std::string& var : expr_obj->GetVars()) {
               auto it = cache_.find(var);
               if (it == cache_.end()) {
-                EXC_RAISING(HSA_STATUS_ERROR,
-                            "Bad metric '" << name << "', var '" << var << "' is not found");
+                //EXC_RAISING(HSA_STATUS_ERROR, "Bad metric '" << name << "', var '" << var << "' is not found");
+                std::cout << "Bad metric '" << name << "', var '" << var << "' is not found" << std::endl;
+              }
+              else {
+                it->second->GetCounters(counters_vec);
               }
-              it->second->GetCounters(counters_vec);
             }
             AddMetric(name, counters_vec, expr_obj);
           }
diff --git a/src/core/metrics.h b/src/core/metrics.h
index 35ff8e8..1a28a56 100644
--- a/src/core/metrics.h
+++ b/src/core/metrics.h
@@ -290,11 +290,13 @@ class MetricsDict {
               metrics_list.push_back(node);
             } else {
               std::cerr << "Error: " << exc.what() << std::endl;
-              abort();
+              std::cout << "Error: " << exc.what() << std::endl;
+              std::cout << "expr_str: " << expr_str << std::endl;
+              //abort();
             }
           }
           if (expr_obj) {
-#if 0
+#if 1
             std::cout << "# " << descr << std::endl;
             std::cout << name << "=" << expr_obj->String() << "\n" << std::endl;
 #endif
@@ -302,10 +304,12 @@ class MetricsDict {
             for (const std::string& var : expr_obj->GetVars()) {
               auto it = cache_.find(var);
               if (it == cache_.end()) {
-                EXC_RAISING(HSA_STATUS_ERROR,
-                            "Bad metric '" << name << "', var '" << var << "' is not found");
+                //EXC_RAISING(HSA_STATUS_ERROR, "Bad metric '" << name << "', var '" << var << "' is not found");
+                std::cout << "Bad metric '" << name << "', var '" << var << "' is not found" << std::endl;
+              }
+              else {
+                it->second->GetCounters(counters_vec);
               }
-              it->second->GetCounters(counters_vec);
             }
             AddMetric(name, counters_vec, expr_obj);
           }
-- 
2.41.1

