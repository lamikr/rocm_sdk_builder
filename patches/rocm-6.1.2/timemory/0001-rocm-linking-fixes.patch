From e56de3819c378140a6f0f72441f30029e15e463d Mon Sep 17 00:00:00 2001
From: Mika Laitio <lamikr@gmail.com>
Date: Fri, 6 Sep 2024 13:44:03 -0700
Subject: [PATCH 1/7] rocm linking fixes

Signed-off-by: Mika Laitio <lamikr@gmail.com>
---
 cmake/Modules/ConfigBinutils.cmake             | 11 +++++++++++
 cmake/Modules/Packages.cmake                   | 18 +++++++++++++-----
 .../timemory/components/caliper/timemory.hpp   |  2 +-
 source/tools/timemory-run/CMakeLists.txt       | 10 ++++++----
 4 files changed, 31 insertions(+), 10 deletions(-)

diff --git a/cmake/Modules/ConfigBinutils.cmake b/cmake/Modules/ConfigBinutils.cmake
index 6cce92af..9faa2cf0 100644
--- a/cmake/Modules/ConfigBinutils.cmake
+++ b/cmake/Modules/ConfigBinutils.cmake
@@ -31,6 +31,17 @@ if(NOT UNIX)
     return()
 endif()
 
+if(NOT TIMEMORY_BUILD_BINUTILS)
+    if(EXISTS ${CMAKE_INSTALL_PREFIX}/lib/libbfd.so)
+        message(STATUS "linking ${CMAKE_INSTALL_PREFIX}/lib/libbfd.so for timemory binutils")
+        target_link_libraries(
+            binutils::binutils
+            INTERFACE ${CMAKE_INSTALL_PREFIX}/lib/libbfd.so)
+    endif()
+    message(STATUS "Do not build binutils as an external project")
+    return()
+endif()
+
 timemory_message(STATUS "Attempting to build binutils as external project")
 
 file(GLOB_RECURSE _TIMEMORY_BINUTILS_BUILD_BYPRODUCTS_GLOB
diff --git a/cmake/Modules/Packages.cmake b/cmake/Modules/Packages.cmake
index 09b0e43a..7963962f 100644
--- a/cmake/Modules/Packages.cmake
+++ b/cmake/Modules/Packages.cmake
@@ -1124,14 +1124,22 @@ endif()
 # ----------------------------------------------------------------------------------------#
 
 if(TIMEMORY_USE_LIBUNWIND AND NOT TIMEMORY_BUILD_LIBUNWIND)
-    find_package(libunwind ${TIMEMORY_FIND_QUIETLY} ${TIMEMORY_FIND_REQUIREMENT})
+    find_library(libunwind unwind REQUIRED HINTS ${CMAKE_INSTALL_PREFIX}/lib)
 
-    if(libunwind_FOUND)
-        target_link_libraries(timemory-libunwind INTERFACE ${libunwind_LIBRARIES})
-        target_include_directories(timemory-libunwind SYSTEM
-                                   INTERFACE ${libunwind_INCLUDE_DIRS})
+    if(EXISTS ${CMAKE_INSTALL_PREFIX}/lib/libunwind.so)
+        target_link_libraries(timemory-libunwind INTERFACE ${CMAKE_INSTALL_PREFIX}/lib/libunwind.so)
+        target_include_directories(timemory-libunwind SYSTEM INTERFACE ${CMAKE_INSTALL_PREFIX}/include)
         timemory_target_compile_definitions(timemory-libunwind INTERFACE
                                             TIMEMORY_USE_LIBUNWIND UNW_LOCAL_ONLY)
+    else()
+        find_package(libunwind REQUIRED ${TIMEMORY_FIND_REQUIREMENT})
+        if(libunwind_FOUND)
+            target_link_libraries(timemory-libunwind INTERFACE ${libunwind_LIBRARIES})
+            target_include_directories(timemory-libunwind SYSTEM
+                      INTERFACE ${libunwind_INCLUDE_DIRS})
+            timemory_target_compile_definitions(timemory-libunwind
+                      INTERFACE TIMEMORY_USE_LIBUNWIND UNW_LOCAL_ONLY)
+        endif()
     endif()
 elseif(TIMEMORY_USE_LIBUNWIND AND TIMEMORY_BUILD_LIBUNWIND)
     timemory_checkout_git_submodule(
diff --git a/source/timemory/components/caliper/timemory.hpp b/source/timemory/components/caliper/timemory.hpp
index 02cd721f..1af076ef 100644
--- a/source/timemory/components/caliper/timemory.hpp
+++ b/source/timemory/components/caliper/timemory.hpp
@@ -327,7 +327,7 @@ struct caliper_marker
         if(m_prefix == nullptr)
             return;
         TIMEMORY_DEBUG_PRINT_HERE("'%s'", m_prefix);
-        cali_safe_end_string(m_id, m_prefix);
+        cali_end_region(m_prefix);
     }
 
     void set_prefix(const char* _prefix) { m_prefix = _prefix; }
diff --git a/source/tools/timemory-run/CMakeLists.txt b/source/tools/timemory-run/CMakeLists.txt
index e591d8b8..8a7f8c5f 100644
--- a/source/tools/timemory-run/CMakeLists.txt
+++ b/source/tools/timemory-run/CMakeLists.txt
@@ -79,10 +79,12 @@ add_executable(
 
 add_target_flag_if_avail(timemory-run "-Wno-unused-function")
 
-target_link_libraries(
-    timemory-run
-    PRIVATE timemory::timemory-dmp timemory::timemory-headers timemory::timemory-dyninst
-            timemory::timemory-compile-options timemory::timemory-develop-options)
+if(EXISTS ${CMAKE_INSTALL_PREFIX}/lib64/libdyninstAPI.so)
+    target_link_libraries(
+        timemory-run
+        PRIVATE timemory::timemory-dmp timemory::timemory-headers timemory::timemory-dyninst ${CMAKE_INSTALL_PREFIX}/lib64/libdyninstAPI.so
+                timemory::timemory-compile-options timemory::timemory-develop-options)
+endif()
 
 target_include_directories(timemory-run PRIVATE ${CMAKE_CURRENT_LIST_DIR})
 
-- 
2.41.1

