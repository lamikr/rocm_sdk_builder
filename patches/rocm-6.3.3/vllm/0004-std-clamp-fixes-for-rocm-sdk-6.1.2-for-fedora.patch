From 9b7ace6d5fc006f8f2015cd93dca9050be9e80a9 Mon Sep 17 00:00:00 2001
From: Mika Laitio <lamikr@pilppa.org>
Date: Fri, 4 Oct 2024 10:57:22 -0700
Subject: [PATCH 4/5] std::clamp fixes for rocm sdk 6.1.2 for fedora

- std::clamp will trigger the assert error on
  fedora 40. Replace the clamp call with
  if else based min/max check.

/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_algo.h:3625:7: error: reference to __host__ function '__glibcxx_assert_fail' in __host__ __device__ function
 3625 |       __glibcxx_assert(!(__hi < __lo));
/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/x86_64-redhat-linux/bits/c++config.h:2453:7: note: expanded from macro '__glibcxx_assert'
 2453 |         std::__glibcxx_assert_fail();                                   \
vllm/build/temp.linux-x86_64-cpython-311/csrc/quantization/compressed_tensors/int8_quant_kernels.hip:93:22: note: called by 'int32_to_int8'
   93 |   int32_t dst = std::clamp(x, i8_min, i8_max);

Signed-off-by: Mika Laitio <lamikr@pilppa.org>
---
 .../compressed_tensors/int8_quant_kernels.cu      | 15 +++++++++++++--
 .../fused_kernels/quant_conversions.cuh           |  8 +++++++-
 2 files changed, 20 insertions(+), 3 deletions(-)

diff --git a/csrc/quantization/compressed_tensors/int8_quant_kernels.cu b/csrc/quantization/compressed_tensors/int8_quant_kernels.cu
index e7978582..e29cfba7 100644
--- a/csrc/quantization/compressed_tensors/int8_quant_kernels.cu
+++ b/csrc/quantization/compressed_tensors/int8_quant_kernels.cu
@@ -26,7 +26,16 @@ static inline __device__ int8_t float_to_int8_rn(float x) {
   float dst = std::nearbyint(x);
 
   // saturate
-  dst = std::clamp(dst, i8_min, i8_max);
+  // dst = std::clamp(dst, i8_min, i8_max);
+  // do not use std::clamp on rocm
+  // See https://github.com/pytorch/pytorch/issues/127666
+  // and https://github.com/pytorch/pytorch/issues/128253.
+  // hip-clang std::clamp __glibcxx_assert_fail host function when building on Fedora40/gcc14.
+  // The following replaces std::clamp(qvalue, qmin, qmax) and is a viable solution for
+  // both CUDA and ROCm since std::clamp and this replacement generates the same PTX.
+  // Using #ifdef USE_ROCM to differentiate caused Windows build failures.
+  // The replacement should generate the same PTX as std::clamp. See https://godbolt.org/z/Wde9KW3v4
+  dst = (dst < i8_min) ? i8_min : (i8_max < dst) ? i8_max : dst;
   return static_cast<int8_t>(dst);
 #else
   // CUDA path
@@ -79,7 +88,9 @@ static inline __device__ int8_t int32_to_int8(int32_t x) {
       static_cast<int32_t>(std::numeric_limits<int8_t>::max());
 
   // saturate
-  int32_t dst = std::clamp(x, i8_min, i8_max);
+  //int32_t dst = std::clamp(x, i8_min, i8_max);
+  int32_t dst;
+  dst = (dst < i8_min) ? i8_min : (i8_max < dst) ? i8_max : dst;
   return static_cast<int8_t>(dst);
 #else
   // CUDA path
diff --git a/csrc/quantization/fused_kernels/quant_conversions.cuh b/csrc/quantization/fused_kernels/quant_conversions.cuh
index f8a98722..3cda51b7 100644
--- a/csrc/quantization/fused_kernels/quant_conversions.cuh
+++ b/csrc/quantization/fused_kernels/quant_conversions.cuh
@@ -21,7 +21,13 @@ static __device__ __forceinline__ int8_t float_to_int8_rn(float const x) {
   // round
   float dst = std::nearbyint(x);
   // saturate
-  dst = std::clamp(dst, i8_min, i8_max);
+  // hip-clang std::clamp __glibcxx_assert_fail host function when building on Fedora40/gcc14.
+  // The following replaces std::clamp(qvalue, qmin, qmax) and is a viable solution for
+  // both CUDA and ROCm since std::clamp and this replacement generates the same PTX.
+  // Using #ifdef USE_ROCM to differentiate caused Windows build failures.
+  // The replacement should generate the same PTX as std::clamp. See https://godbolt.org/z/Wde9KW3v4
+  //dst = std::clamp(dst, i8_min, i8_max);
+  dst = (dst < i8_min) ? i8_min : (i8_max < dst) ? i8_max : dst;
   return static_cast<int8_t>(dst);
 #else
   // CUDA path
-- 
2.48.1

