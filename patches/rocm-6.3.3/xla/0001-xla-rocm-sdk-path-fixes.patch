From 2d482a9090c982524b93988bc75b7a86cad5eb31 Mon Sep 17 00:00:00 2001
From: Mika Laitio <lamikr@gmail.com>
Date: Sat, 24 Aug 2024 17:28:24 -0700
Subject: [PATCH 1/3] xla rocm sdk path fixes

Signed-off-by: Mika Laitio <lamikr@gmail.com>
---
 .../tsl/third_party/gpus/find_rocm_config.py  |  2 +-
 .../tsl/third_party/gpus/rocm_configure.bzl   | 31 ++++++++++---------
 .../tsl/tools/toolchains/clang6/clang.BUILD   | 24 +++++++-------
 .../gpu/llvm_gpu_backend/gpu_backend_lib.cc   |  2 +-
 xla/stream_executor/gpu/asm_compiler.cc       |  2 +-
 5 files changed, 31 insertions(+), 30 deletions(-)

diff --git a/third_party/tsl/third_party/gpus/find_rocm_config.py b/third_party/tsl/third_party/gpus/find_rocm_config.py
index cd64efe649..27ff77a798 100644
--- a/third_party/tsl/third_party/gpus/find_rocm_config.py
+++ b/third_party/tsl/third_party/gpus/find_rocm_config.py
@@ -38,7 +38,7 @@ class ConfigError(Exception):
 
 
 def _get_default_rocm_path():
-  return "/opt/rocm"
+  return "/opt/rocm_sdk_612"
 
 
 def _get_rocm_install_path():
diff --git a/third_party/tsl/third_party/gpus/rocm_configure.bzl b/third_party/tsl/third_party/gpus/rocm_configure.bzl
index 89a5c21ebf..81f6327fab 100644
--- a/third_party/tsl/third_party/gpus/rocm_configure.bzl
+++ b/third_party/tsl/third_party/gpus/rocm_configure.bzl
@@ -40,7 +40,7 @@ _ROCM_TOOLKIT_PATH = "ROCM_PATH"
 _TF_ROCM_AMDGPU_TARGETS = "TF_ROCM_AMDGPU_TARGETS"
 _TF_ROCM_CONFIG_REPO = "TF_ROCM_CONFIG_REPO"
 
-_DEFAULT_ROCM_TOOLKIT_PATH = "/opt/rocm"
+_DEFAULT_ROCM_TOOLKIT_PATH = "/opt/rocm_sdk_612"
 
 def verify_build_defines(params):
     """Verify all variables that crosstool/BUILD.rocm.tpl expects are substituted.
@@ -193,18 +193,18 @@ def _rocm_include_path(repository_ctx, rocm_config, bash_bin):
 
     # Add HIP-Clang headers (realpath relative to compiler binary)
     rocm_toolkit_path = realpath(repository_ctx, rocm_config.rocm_toolkit_path, bash_bin)
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/8.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/9.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/10.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/11.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/12.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/13.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/14.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/15.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/16.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/17.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/17/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/18/include")
+    inc_dirs.append(rocm_toolkit_path + "/lib/clang/8.0/include")
+    inc_dirs.append(rocm_toolkit_path + "/lib/clang/9.0.0/include")
+    inc_dirs.append(rocm_toolkit_path + "/lib/clang/10.0.0/include")
+    inc_dirs.append(rocm_toolkit_path + "/lib/clang/11.0.0/include")
+    inc_dirs.append(rocm_toolkit_path + "/lib/clang/12.0.0/include")
+    inc_dirs.append(rocm_toolkit_path + "/lib/clang/13.0.0/include")
+    inc_dirs.append(rocm_toolkit_path + "/lib/clang/14.0.0/include")
+    inc_dirs.append(rocm_toolkit_path + "/lib/clang/15.0.0/include")
+    inc_dirs.append(rocm_toolkit_path + "/lib/clang/16.0.0/include")
+    inc_dirs.append(rocm_toolkit_path + "/lib/clang/17.0.0/include")
+    inc_dirs.append(rocm_toolkit_path + "/lib/clang/17/include")
+    inc_dirs.append(rocm_toolkit_path + "/lib/clang/18/include")
 
     # Support hcc based off clang 10.0.0 (for ROCm 3.3)
     inc_dirs.append(rocm_toolkit_path + "/hcc/compiler/lib/clang/10.0.0/include/")
@@ -212,6 +212,7 @@ def _rocm_include_path(repository_ctx, rocm_config, bash_bin):
 
     # Add hcc headers
     inc_dirs.append(rocm_toolkit_path + "/hcc/include")
+    inc_dirs.append(rocm_toolkit_path + "include")
 
     return inc_dirs
 
@@ -619,7 +620,7 @@ def _create_local_rocm_repository(repository_ctx):
         outs = rocm_lib_outs,
     ))
 
-    clang_offload_bundler_path = rocm_toolkit_path + "/llvm/bin/clang-offload-bundler"
+    clang_offload_bundler_path = rocm_toolkit_path + "/bin/clang-offload-bundler"
 
     # copy files mentioned in third_party/gpus/rocm/BUILD
     copy_rules.append(make_copy_files_rule(
@@ -740,7 +741,7 @@ def _create_local_rocm_repository(repository_ctx):
             "%{hipcc_env}": _hipcc_env(repository_ctx),
             "%{rocr_runtime_path}": rocm_config.rocm_toolkit_path + "/lib",
             "%{rocr_runtime_library}": "hsa-runtime64",
-            "%{hip_runtime_path}": rocm_config.rocm_toolkit_path + "/lib",
+            "%{hip_runtime_path}": rocm_config.rocm_toolkit_path + "/lib64",
             "%{hip_runtime_library}": "amdhip64",
             "%{crosstool_verbose}": _crosstool_verbose(repository_ctx),
             "%{gcc_host_compiler_path}": str(cc),
diff --git a/third_party/tsl/tools/toolchains/clang6/clang.BUILD b/third_party/tsl/tools/toolchains/clang6/clang.BUILD
index 094d69271a..38093bdb8b 100644
--- a/third_party/tsl/tools/toolchains/clang6/clang.BUILD
+++ b/third_party/tsl/tools/toolchains/clang6/clang.BUILD
@@ -5,67 +5,67 @@ licenses(["restricted"])  # NCSA, GPLv3 (e.g. gold)
 
 filegroup(
     name = "ar",
-    srcs = ["llvm/bin/llvm-ar"],
+    srcs = ["bin/llvm-ar"],
     output_licenses = ["unencumbered"],
 )
 
 filegroup(
     name = "as",
-    srcs = ["llvm/bin/llvm-as"],
+    srcs = ["bin/llvm-as"],
     output_licenses = ["unencumbered"],
 )
 
 filegroup(
     name = "cpp",
-    srcs = ["llvm/bin/llvm-cpp"],
+    srcs = ["bin/llvm-cpp"],
     output_licenses = ["unencumbered"],
 )
 
 filegroup(
     name = "dwp",
-    srcs = ["llvm/bin/llvm-dwp"],
+    srcs = ["bin/llvm-dwp"],
     output_licenses = ["unencumbered"],
 )
 
 filegroup(
     name = "gcc",
-    srcs = ["llvm/bin/clang"],
+    srcs = ["bin/clang"],
     output_licenses = ["unencumbered"],
 )
 
 filegroup(
     name = "gcov",
-    srcs = ["llvm/bin/llvm-cov"],
+    srcs = ["bin/llvm-cov"],
     output_licenses = ["unencumbered"],
 )
 
 filegroup(
     name = "ld",
-    srcs = ["llvm/bin/ld.lld"],
+    srcs = ["bin/ld.lld"],
     output_licenses = ["unencumbered"],
 )
 
 filegroup(
     name = "nm",
-    srcs = ["llvm/bin/llvm-nm"],
+    srcs = ["bin/llvm-nm"],
     output_licenses = ["unencumbered"],
 )
 
 filegroup(
     name = "objcopy",
-    srcs = ["llvm/bin/llvm-objcopy"],
+    srcs = ["bin/llvm-objcopy"],
     output_licenses = ["unencumbered"],
 )
 
 filegroup(
     name = "objdump",
-    srcs = ["llvm/bin/llvm-objdump"],
+    srcs = ["bin/llvm-objdump"],
     output_licenses = ["unencumbered"],
 )
 
 filegroup(
     name = "profdata",
-    srcs = ["llvm/bin/llvm-profdata"],
+    srcs = ["bin/llvm-profdata"],
     output_licenses = ["unencumbered"],
 )
 
@@ -77,7 +77,7 @@ filegroup(
 
 filegroup(
     name = "xray",
-    srcs = ["llvm/bin/llvm-xray"],
+    srcs = ["bin/llvm-xray"],
     output_licenses = ["unencumbered"],
 )
 
diff --git a/xla/service/gpu/llvm_gpu_backend/gpu_backend_lib.cc b/xla/service/gpu/llvm_gpu_backend/gpu_backend_lib.cc
index 6f60f4b3a5..9f55ead568 100644
--- a/xla/service/gpu/llvm_gpu_backend/gpu_backend_lib.cc
+++ b/xla/service/gpu/llvm_gpu_backend/gpu_backend_lib.cc
@@ -853,7 +853,7 @@ absl::StatusOr<std::vector<uint8_t>> EmitModuleToHsaco(
     ir_fs->flush();
   }
   // Locate lld.
-  std::string lld_path = tsl::io::JoinPath(tsl::RocmRoot(), "llvm/bin");
+  std::string lld_path = tsl::io::JoinPath(tsl::RocmRoot(), "bin");
   auto lld_program = llvm::sys::findProgramByName("ld.lld", {lld_path});
   if (!lld_program) {
     return xla::Internal("unable to find ld.lld in PATH: %s",
diff --git a/xla/stream_executor/gpu/asm_compiler.cc b/xla/stream_executor/gpu/asm_compiler.cc
index 1bdef804f8..97739f84bf 100644
--- a/xla/stream_executor/gpu/asm_compiler.cc
+++ b/xla/stream_executor/gpu/asm_compiler.cc
@@ -53,7 +53,7 @@ static std::string findRocmExecutable(const std::string& binary_relative_path,
 absl::StatusOr<std::vector<uint8_t>> BundleGpuAsm(
     std::vector<HsacoImage> images, const std::string rocm_root_dir) {
   std::string clang_offload_bundler_path =
-      findRocmExecutable("llvm/bin/clang-offload-bundler", rocm_root_dir);
+      findRocmExecutable("bin/clang-offload-bundler", rocm_root_dir);
 
   // Initialise the "--inputs" / "--targets" arguments for the
   // clang-offload-bundler with a dummy file / host target triple...
-- 
2.41.1

