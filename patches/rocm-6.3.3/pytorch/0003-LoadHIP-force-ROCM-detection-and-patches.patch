From fb5157871cfea6430d9f650c23a8ad74b6a6ada7 Mon Sep 17 00:00:00 2001
From: Mika Laitio <lamikr@pilppa.org>
Date: Fri, 10 May 2024 10:32:33 -0700
Subject: [PATCH 03/13] LoadHIP force ROCM detection and patches

- set HIP_ROOT_DIR to ROCM_PATH which is set
  by the build scripts
- set ROCM_VERSION
- search both lib and lib64 directories
  (note some libs still installed to lib-dir
  in rocm_sdk_builder_600)
- set MAGMA_HOME by default to rocm_sdk rootdir
  (rocm_sdk_builder builds magma to sdk root dir)

Signed-off-by: Mika Laitio <lamikr@pilppa.org>
---
 cmake/Dependencies.cmake   |  5 ++--
 cmake/public/LoadHIP.cmake | 54 ++++++++++++++++++++++----------------
 2 files changed, 35 insertions(+), 24 deletions(-)

diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index 6e7c87631f8..012cad79758 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -1096,8 +1096,9 @@ if(USE_ROCM)
     else()
       message(STATUS "Disabling Kernel Assert for ROCm")
     endif()
-
-    include(${CMAKE_CURRENT_LIST_DIR}/External/aotriton.cmake)
+    if(USE_FLASH_ATTENTION)
+      include(${CMAKE_CURRENT_LIST_DIR}/External/aotriton.cmake)
+    endif()
     if(USE_CUDA)
       caffe2_update_option(USE_MEM_EFF_ATTENTION OFF)
     endif()
diff --git a/cmake/public/LoadHIP.cmake b/cmake/public/LoadHIP.cmake
index fa39156031f..70fe47a9e64 100644
--- a/cmake/public/LoadHIP.cmake
+++ b/cmake/public/LoadHIP.cmake
@@ -17,8 +17,8 @@ endif()
 
 # MAGMA_HOME
 if(NOT DEFINED ENV{MAGMA_HOME})
-  set(MAGMA_HOME ${ROCM_PATH}/magma)
-  set(ENV{MAGMA_HOME} ${ROCM_PATH}/magma)
+   set(MAGMA_HOME ${ROCM_PATH})
+   set(ENV{MAGMA_HOME} ${ROCM_PATH})
 else()
   set(MAGMA_HOME $ENV{MAGMA_HOME})
 endif()
@@ -41,6 +41,7 @@ endmacro()
 find_package_and_print_version(HIP 1.0)
 
 if(HIP_FOUND)
+  #message( FATAL_ERROR "LoadHIP debug trace1.")
   set(PYTORCH_FOUND_HIP TRUE)
   set(FOUND_ROCM_VERSION_H FALSE)
 
@@ -54,13 +55,16 @@ if(HIP_FOUND)
     file(WRITE ${file} ""
       "#include <rocm_version.h>\n"
       )
+      #message( FATAL_ERROR "LoadHIP debug trace2")
   elseif(EXISTS ${ROCM_INCLUDE_DIRS}/rocm-core/rocm_version.h)
     set(FOUND_ROCM_VERSION_H TRUE)
     file(WRITE ${file} ""
       "#include <rocm-core/rocm_version.h>\n"
       )
+      #message( FATAL_ERROR "LoadHIP debug trace3.")
   else()
     message("********************* rocm_version.h couldnt be found ******************\n")
+    #message( FATAL_ERROR "LoadHIP debug trace4.")
   endif()
 
   if(FOUND_ROCM_VERSION_H)
@@ -90,9 +94,12 @@ if(HIP_FOUND)
     message(STATUS "Caffe2: Header version is: " ${rocm_version_from_header})
     set(ROCM_VERSION_DEV_RAW ${rocm_version_from_header})
     message("\n***** ROCm version from rocm_version.h ****\n")
+  else()
+    message( FATAL_ERROR "LoadHIP FOUND_ROCM_VERSION_H failed, ROCM_PATH: ${ROCM_PATH}")
   endif()
 
   string(REGEX MATCH "^([0-9]+)\.([0-9]+)\.([0-9]+).*$" ROCM_VERSION_DEV_MATCH ${ROCM_VERSION_DEV_RAW})
+  #message( FATAL_ERROR "ROCM_VERSION_DEV_MATCH: ${ROCM_VERSION_DEV_MATCH}, ROCM_VERSION_DEV_RAW: ${ROCM_VERSION_DEV_RAW}, ROCM_VERSION: ${ROCM_VERSION}")
 
   if(ROCM_VERSION_DEV_MATCH)
     set(ROCM_VERSION_DEV_MAJOR ${CMAKE_MATCH_1})
@@ -100,6 +107,8 @@ if(HIP_FOUND)
     set(ROCM_VERSION_DEV_PATCH ${CMAKE_MATCH_3})
     set(ROCM_VERSION_DEV "${ROCM_VERSION_DEV_MAJOR}.${ROCM_VERSION_DEV_MINOR}.${ROCM_VERSION_DEV_PATCH}")
     math(EXPR ROCM_VERSION_DEV_INT "(${ROCM_VERSION_DEV_MAJOR}*10000) + (${ROCM_VERSION_DEV_MINOR}*100) + ${ROCM_VERSION_DEV_PATCH}")
+    set(ROCM_VERSION ${ROCM_VERSION_DEV_INT})
+    set(HIP_ROOT_DIR ${ROCM_PATH})
   endif()
 
   message("ROCM_VERSION_DEV: ${ROCM_VERSION_DEV}")
@@ -112,6 +121,7 @@ if(HIP_FOUND)
   message("HIP_VERSION_MAJOR: ${HIP_VERSION_MAJOR}")
   message("HIP_VERSION_MINOR: ${HIP_VERSION_MINOR}")
   message("TORCH_HIP_VERSION: ${TORCH_HIP_VERSION}")
+  message("USE_FLASH_ATTENTION: ${USE_FLASH_ATTENTION}")
 
   message("\n***** Library versions from dpkg *****\n")
   execute_process(COMMAND dpkg -l COMMAND grep rocm-dev COMMAND awk "{print $2 \" VERSION: \" $3}")
@@ -129,23 +139,23 @@ if(HIP_FOUND)
   ### Remove setting of Flags when FindHIP.CMake PR #558 is accepted.###
 
   set(hip_DIR ${ROCM_PATH}/lib/cmake/hip)
-  set(hsa-runtime64_DIR ${ROCM_PATH}/lib/cmake/hsa-runtime64)
-  set(AMDDeviceLibs_DIR ${ROCM_PATH}/lib/cmake/AMDDeviceLibs)
-  set(amd_comgr_DIR ${ROCM_PATH}/lib/cmake/amd_comgr)
-  set(rocrand_DIR ${ROCM_PATH}/lib/cmake/rocrand)
-  set(hiprand_DIR ${ROCM_PATH}/lib/cmake/hiprand)
-  set(rocblas_DIR ${ROCM_PATH}/lib/cmake/rocblas)
-  set(hipblas_DIR ${ROCM_PATH}/lib/cmake/hipblas)
-  set(hipblaslt_DIR ${ROCM_PATH}/lib/cmake/hipblaslt)
-  set(miopen_DIR ${ROCM_PATH}/lib/cmake/miopen)
-  set(rocfft_DIR ${ROCM_PATH}/lib/cmake/rocfft)
-  set(hipfft_DIR ${ROCM_PATH}/lib/cmake/hipfft)
-  set(hipsparse_DIR ${ROCM_PATH}/lib/cmake/hipsparse)
-  set(rccl_DIR ${ROCM_PATH}/lib/cmake/rccl)
-  set(rocprim_DIR ${ROCM_PATH}/lib/cmake/rocprim)
+  set(hsa-runtime64_DIR ${ROCM_PATH}/lib64/cmake/hsa-runtime64)
+  set(AMDDeviceLibs_DIR ${ROCM_PATH}/lib64/cmake/AMDDeviceLibs)
+  set(amd_comgr_DIR ${ROCM_PATH}/lib64/cmake/amd_comgr)
+  set(rocrand_DIR ${ROCM_PATH}/lib64/cmake/rocrand)
+  set(hiprand_DIR ${ROCM_PATH}/lib64/cmake/hiprand)
+  set(rocblas_DIR ${ROCM_PATH}/lib64/cmake/rocblas)
+  set(hipblas_DIR ${ROCM_PATH}/lib64/cmake/hipblas)
+  set(hipblaslt_DIR ${ROCM_PATH}/lib64/cmake/hipblaslt)
+  set(miopen_DIR ${ROCM_PATH}/lib64/cmake/miopen)
+  set(rocfft_DIR ${ROCM_PATH}/lib64/cmake/rocfft)
+  set(hipfft_DIR ${ROCM_PATH}/lib64/cmake/hipfft)
+  set(hipsparse_DIR ${ROCM_PATH}/lib64/cmake/hipsparse)
+  set(rccl_DIR ${ROCM_PATH}/lib64/cmake/rccl)
+  set(rocprim_DIR ${ROCM_PATH}/lib64/cmake/rocprim)
   set(hipcub_DIR ${ROCM_PATH}/lib/cmake/hipcub)
   set(rocthrust_DIR ${ROCM_PATH}/lib/cmake/rocthrust)
-  set(hipsolver_DIR ${ROCM_PATH}/lib/cmake/hipsolver)
+  set(hipsolver_DIR ${ROCM_PATH}/lib64/cmake/hipsolver)
 
 
   find_package_and_print_version(hip REQUIRED)
@@ -166,24 +176,24 @@ if(HIP_FOUND)
   find_package_and_print_version(hipsolver REQUIRED)
 
 
-  find_library(PYTORCH_HIP_LIBRARIES amdhip64 HINTS ${ROCM_PATH}/lib)
+  find_library(PYTORCH_HIP_LIBRARIES amdhip64 HINTS ${ROCM_PATH}/lib ${ROCM_PATH}/lib64)
   # TODO: miopen_LIBRARIES should return fullpath to the library file,
   # however currently it's just the lib name
   if(TARGET ${miopen_LIBRARIES})
     set(PYTORCH_MIOPEN_LIBRARIES ${miopen_LIBRARIES})
   else()
-    find_library(PYTORCH_MIOPEN_LIBRARIES ${miopen_LIBRARIES} HINTS ${ROCM_PATH}/lib)
+    find_library(PYTORCH_MIOPEN_LIBRARIES ${miopen_LIBRARIES} HINTS ${ROCM_PATH}/lib ${ROCM_PATH}/lib64)
   endif()
   # TODO: rccl_LIBRARIES should return fullpath to the library file,
   # however currently it's just the lib name
   if(TARGET ${rccl_LIBRARIES})
     set(PYTORCH_RCCL_LIBRARIES ${rccl_LIBRARIES})
   else()
-    find_library(PYTORCH_RCCL_LIBRARIES ${rccl_LIBRARIES} HINTS ${ROCM_PATH}/lib)
+    find_library(PYTORCH_RCCL_LIBRARIES ${rccl_LIBRARIES} HINTS ${ROCM_PATH}/lib ${ROCM_PATH}/lib64)
   endif()
-  find_library(ROCM_HIPRTC_LIB hiprtc HINTS ${ROCM_PATH}/lib)
+  find_library(ROCM_HIPRTC_LIB hiprtc HINTS ${ROCM_PATH}/lib ${ROCM_PATH}/lib64)
   # roctx is part of roctracer
-  find_library(ROCM_ROCTX_LIB roctx64 HINTS ${ROCM_PATH}/lib)
+  find_library(ROCM_ROCTX_LIB roctx64 HINTS ${ROCM_PATH}/lib ${ROCM_PATH}/lib64)
 
   # check whether HIP declares new types
   set(file "${PROJECT_BINARY_DIR}/hip_new_types.cc")
-- 
2.39.5

