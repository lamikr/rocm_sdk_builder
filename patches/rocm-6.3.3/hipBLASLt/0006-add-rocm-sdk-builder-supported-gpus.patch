From 15fcd305f75faa7c1a7a303de7faaf6d5e5766bb Mon Sep 17 00:00:00 2001
From: Mika Laitio <lamikr@gmail.com>
Date: Sat, 15 Mar 2025 13:34:19 -0700
Subject: [PATCH 6/6] add rocm sdk builder supported gpus

Signed-off-by: Mika Laitio <lamikr@gmail.com>
---
 CMakeLists.txt                                |  2 +-
 tensilelite/Tensile/Common.py                 |  7 ++-
 tensilelite/Tensile/Ops/AMaxGenerator.py      |  2 +-
 tensilelite/Tensile/Ops/LayerNormGenerator.py |  2 +-
 tensilelite/Tensile/Source/CMakeLists.txt     |  4 +-
 .../Source/lib/include/Tensile/AMDGPU.hpp     | 63 +++++++++++++++++++
 .../include/Tensile/PlaceholderLibrary.hpp    | 15 +++++
 .../Tensile/Serialization/Predicates.hpp      |  9 +++
 .../Source/lib/source/ocl/OclUtils.cpp        | 36 +++++++++++
 tensilelite/Tensile/Source/memory_gfx.h       |  7 ++-
 10 files changed, 138 insertions(+), 9 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index e6181903..3236c73c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -159,7 +159,7 @@ else()
     if (NOT BUILD_ADDRESS_SANITIZER)
       #Set the AMDGPU_TARGETS with backward compatiblity
       rocm_check_target_ids(DEFAULT_AMDGPU_TARGETS
-          TARGETS "gfx908:xnack+;gfx908:xnack-;gfx90a:xnack+;gfx90a:xnack-;gfx942;gfx1100;gfx1101;;gfx1200;gfx1201"
+          TARGETS "gfx908:xnack+;gfx908:xnack-;gfx90a:xnack+;gfx90a:xnack-;gfx942;gfx1100;gfx1101;gfx1102;gfx1103;gfx1150;gfx1151;gfx1200;gfx1201"
       )
     else()
       #build xnack-supported targets only
diff --git a/tensilelite/Tensile/Common.py b/tensilelite/Tensile/Common.py
index 852cd81b..27a9d1cf 100644
--- a/tensilelite/Tensile/Common.py
+++ b/tensilelite/Tensile/Common.py
@@ -295,8 +295,11 @@ architectureMap = {
   'gfx940':'aquavanjaram', 'gfx940:xnack+':'aquavanjaram', 'gfx940:xnack-':'aquavanjaram',
   'gfx941':'aquavanjaram', 'gfx941:xnack+':'aquavanjaram', 'gfx941:xnack-':'aquavanjaram',
   'gfx942':'aquavanjaram', 'gfx942:xnack+':'aquavanjaram', 'gfx942:xnack-':'aquavanjaram',
-  'gfx1010':'navi10', 'gfx1011':'navi12', 'gfx1012':'navi14', 'gfx1030':'navi21',
-  'gfx1100':'navi31', 'gfx1101':'navi32', 'gfx1102':'navi33',
+  'gfx1010':'navi10', 'gfx1011':'navi12', 'gfx1012':'navi14',
+  'gfx1030':'navi21', 'gfx1031':'navi22', 'gfx1032':'navi23', 'gfx1034':'navi24', 'gfx1035':'rembrandt', 'gfx1036':'raphael',
+  'gfx1100':'navi31', 'gfx1101':'navi32', 'gfx1102':'navi33', 'gfx1103':'phoenix',
+  'gfx1150':'strixpoint',
+  'gfx1151':'strixhalo',
   'gfx1200':'gfx1200', 'gfx1201':'gfx1201',
 }
 
diff --git a/tensilelite/Tensile/Ops/AMaxGenerator.py b/tensilelite/Tensile/Ops/AMaxGenerator.py
index 03325974..e41c03d4 100644
--- a/tensilelite/Tensile/Ops/AMaxGenerator.py
+++ b/tensilelite/Tensile/Ops/AMaxGenerator.py
@@ -51,7 +51,7 @@ def kernel_header(name: str, gfx_arch: str, vgpr: int, sgpr: int, lds: int):
     header += f'.p2align 6\n'
     header += f'.amdhsa_kernel {name}\n'
     header += f'  .amdhsa_user_sgpr_kernarg_segment_ptr 1\n'
-    if (gfx_arch not in ("gfx900", "gfx908", "gfx1030", "gfx1100", "gfx1101", "gfx1102", "gfx1200", "gfx1201")):
+    if (gfx_arch not in ("gfx900", "gfx902", "gfx906", "gfx908", "gfx1010", "gfx1011", "gfx1012", "gfx1030", "gfx1031", "gfx1032", "gfx1034", "gfx1035", "gfx1036", "gfx1100", "gfx1101", "gfx1102", "gfx1103", "gfx1150", "gfx1151", "gfx1200", "gfx1201")):
         header += f'  .amdhsa_accum_offset {vgpr} // accvgpr offset\n'
     header += f'  .amdhsa_next_free_vgpr {vgpr} // vgprs\n'
     header += f'  .amdhsa_next_free_sgpr {sgpr} // sgprs\n'
diff --git a/tensilelite/Tensile/Ops/LayerNormGenerator.py b/tensilelite/Tensile/Ops/LayerNormGenerator.py
index 9546d3c2..afcd7852 100644
--- a/tensilelite/Tensile/Ops/LayerNormGenerator.py
+++ b/tensilelite/Tensile/Ops/LayerNormGenerator.py
@@ -51,7 +51,7 @@ def kernel_header(name: str, gfx_arch: str, vgpr: int, sgpr: int, lds: int):
     header += f'.p2align 6\n'
     header += f'.amdhsa_kernel {name}\n'
     header += f'  .amdhsa_user_sgpr_kernarg_segment_ptr 1\n'
-    if (gfx_arch not in ("gfx900", "gfx908", "gfx1030", "gfx1100", "gfx1101", "gfx1102", "gfx1200", "gfx1201")):
+    if (gfx_arch not in ("gfx900", "gfx902", "gfx906", "gfx908", "gfx1010", "gfx1011", "gfx1012", "gfx1030", "gfx1031", "gfx1032", "gfx1034", "gfx1035", "gfx1036", "gfx1100", "gfx1101", "gfx1102", "gfx1103", "gfx1150", "gfx1151", "gfx1200", "gfx1201")):
         header += f'  .amdhsa_accum_offset {vgpr} // accvgpr offset\n'
     header += f'  .amdhsa_next_free_vgpr {vgpr} // vgprs\n'
     header += f'  .amdhsa_next_free_sgpr {sgpr} // sgprs\n'
diff --git a/tensilelite/Tensile/Source/CMakeLists.txt b/tensilelite/Tensile/Source/CMakeLists.txt
index ec66bce0..620df0b8 100644
--- a/tensilelite/Tensile/Source/CMakeLists.txt
+++ b/tensilelite/Tensile/Source/CMakeLists.txt
@@ -51,9 +51,9 @@ if(NOT DEFINED CXX_VERSION_STRING)
 endif()
 
 if(CMAKE_CXX_COMPILER STREQUAL "hipcc")
-  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx906:xnack- gfx908:xnack- gfx90a:xnack- gfx1010 gfx1011 gfx1012 gfx1030 gfx1100 gfx1101 gfx1102 gfx1200 gfx1201 CACHE STRING "GPU architectures")
+  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx906:xnack- gfx908:xnack- gfx90a:xnack- gfx1010 gfx1011 gfx1012  gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1036 gfx1100 gfx1101 gfx1102 gfx1103 gfx1150 gfx1151 gfx1200 gfx1201 CACHE STRING "GPU architectures")
 else()
-  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx906 gfx908 gfx90a gfx1010 gfx1011 gfx1012 gfx1030 gfx1100 gfx1101 gfx1102 gfx1200 gfx1201 CACHE STRING "GPU architectures")
+  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx906 gfx908 gfx90a gfx1010 gfx1011 gfx1012 gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1036 gfx1100 gfx1101 gfx1102 gfx1103 gfx1150 gfx1151 gfx1200 gfx1201 CACHE STRING "GPU architectures")
 endif()
 
 include(CMakeDependentOption)
diff --git a/tensilelite/Tensile/Source/lib/include/Tensile/AMDGPU.hpp b/tensilelite/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
index 0f6609fe..22be041e 100644
--- a/tensilelite/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
+++ b/tensilelite/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
@@ -56,6 +56,7 @@ namespace Tensile
             //gfx802  =  3,
             gfx803  = 803,
             gfx900  = 900,
+            gfx902  = 902,
             gfx906  = 906,
             gfx908  = 908,
             gfx90a  = 910,
@@ -66,9 +67,17 @@ namespace Tensile
             gfx1011 = 1011,
             gfx1012 = 1012,
             gfx1030 = 1030,
+            gfx1031 = 1031,
+            gfx1032 = 1032,
+            gfx1034 = 1034,
+            gfx1035 = 1035,
+            gfx1036 = 1036,
             gfx1100 = 1100,
             gfx1101 = 1101,
             gfx1102 = 1102,
+            gfx1103 = 1103,
+            gfx1150 = 1150,
+            gfx1151 = 1151,
             gfx1200 = 1200,
             gfx1201 = 1201
         };
@@ -83,6 +92,10 @@ namespace Tensile
             {
                 return Processor::gfx900;
             }
+            else if(archName.find("gfx902") != std::string::npos)
+            {
+                return Processor::gfx902;
+            }
             else if(archName.find("gfx906") != std::string::npos)
             {
                 return Processor::gfx906;
@@ -123,6 +136,26 @@ namespace Tensile
             {
                 return Processor::gfx1030;
             }
+            else if(archName.find("gfx1031") != std::string::npos)
+            {
+                return Processor::gfx1031;
+            }
+            else if(archName.find("gfx1032") != std::string::npos)
+            {
+                return Processor::gfx1032;
+            }
+            else if(archName.find("gfx1034") != std::string::npos)
+            {
+                return Processor::gfx1034;
+            }
+            else if(archName.find("gfx1035") != std::string::npos)
+            {
+                return Processor::gfx1035;
+            }
+            else if(archName.find("gfx1036") != std::string::npos)
+            {
+                return Processor::gfx1036;
+            }
             else if(archName.find("gfx1100") != std::string::npos)
             {
                 return Processor::gfx1100;
@@ -135,6 +168,18 @@ namespace Tensile
             {
                 return Processor::gfx1102;
             }
+            else if(archName.find("gfx1103") != std::string::npos)
+            {
+                return Processor::gfx1103;
+            }
+            else if(archName.find("gfx1150") != std::string::npos)
+            {
+                return Processor::gfx1150;
+            }
+            else if(archName.find("gfx1151") != std::string::npos)
+            {
+                return Processor::gfx1151;
+            }
             else if(archName.find("gfx1200") != std::string::npos)
             {
                 return Processor::gfx1200;
@@ -154,6 +199,8 @@ namespace Tensile
                 return "gfx803";
             case AMDGPU::Processor::gfx900:
                 return "gfx900";
+            case AMDGPU::Processor::gfx902:
+                return "gfx902";
             case AMDGPU::Processor::gfx906:
                 return "gfx906";
             case AMDGPU::Processor::gfx908:
@@ -174,12 +221,28 @@ namespace Tensile
                 return "gfx1012";
             case AMDGPU::Processor::gfx1030:
                 return "gfx1030";
+            case AMDGPU::Processor::gfx1031:
+                return "gfx1031";
+            case AMDGPU::Processor::gfx1032:
+                return "gfx1032";
+            case AMDGPU::Processor::gfx1034:
+                return "gfx1034";
+            case AMDGPU::Processor::gfx1035:
+                return "gfx1035";
+            case AMDGPU::Processor::gfx1036:
+                return "gfx1036";
             case AMDGPU::Processor::gfx1100:
                 return "gfx1100";
             case AMDGPU::Processor::gfx1101:
                 return "gfx1101";
             case AMDGPU::Processor::gfx1102:
                 return "gfx1102";
+            case AMDGPU::Processor::gfx1103:
+                return "gfx1103";
+            case AMDGPU::Processor::gfx1150:
+                return "gfx1150";
+            case AMDGPU::Processor::gfx1151:
+                return "gfx1151";
             case AMDGPU::Processor::gfx1200:
                 return "gfx1200";
             case AMDGPU::Processor::gfx1201:
diff --git a/tensilelite/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp b/tensilelite/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
index 6b3dce06..34e1bbe2 100644
--- a/tensilelite/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
+++ b/tensilelite/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
@@ -42,6 +42,7 @@ namespace Tensile
         None,
         gfx803,
         gfx900,
+        gfx902,
         gfx906,
         gfx908,
         gfx90a,
@@ -56,9 +57,13 @@ namespace Tensile
         gfx1032,
         gfx1034,
         gfx1035,
+        gfx1036,
         gfx1100,
         gfx1101,
         gfx1102,
+        gfx1103,
+        gfx1150,
+        gfx1151,
         gfx1200,
         gfx1201,
         All
@@ -75,6 +80,8 @@ namespace Tensile
             return "TensileLibrary_*_gfx803";
         case LazyLoadingInit::gfx900:
             return "TensileLibrary_*_gfx900";
+        case LazyLoadingInit::gfx902:
+            return "TensileLibrary_*_gfx902";
         case LazyLoadingInit::gfx906:
             return "TensileLibrary_*_gfx906";
         case LazyLoadingInit::gfx908:
@@ -103,12 +110,20 @@ namespace Tensile
             return "TensileLibrary_*_gfx1034";
         case LazyLoadingInit::gfx1035:
             return "TensileLibrary_*_gfx1035";
+        case LazyLoadingInit::gfx1036:
+            return "TensileLibrary_*_gfx1036";
         case LazyLoadingInit::gfx1100:
             return "TensileLibrary_*_gfx1100";
         case LazyLoadingInit::gfx1101:
             return "TensileLibrary_*_gfx1101";
         case LazyLoadingInit::gfx1102:
             return "TensileLibrary_*_gfx1102";
+        case LazyLoadingInit::gfx1103:
+            return "TensileLibrary_*_gfx1103";
+        case LazyLoadingInit::gfx1150:
+            return "TensileLibrary_*_gfx1150";
+        case LazyLoadingInit::gfx1151:
+            return "TensileLibrary_*_gfx1151";
         case LazyLoadingInit::gfx1200:
             return "TensileLibrary_*_gfx1200";
         case LazyLoadingInit::gfx1201:
diff --git a/tensilelite/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp b/tensilelite/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
index 81d92dc1..8a16871d 100644
--- a/tensilelite/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
+++ b/tensilelite/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
@@ -208,6 +208,7 @@ namespace Tensile
             {
                 iot::enumCase(io, value, "gfx803", AMDGPU::Processor::gfx803);
                 iot::enumCase(io, value, "gfx900", AMDGPU::Processor::gfx900);
+                iot::enumCase(io, value, "gfx902", AMDGPU::Processor::gfx902);
                 iot::enumCase(io, value, "gfx906", AMDGPU::Processor::gfx906);
                 iot::enumCase(io, value, "gfx908", AMDGPU::Processor::gfx908);
                 iot::enumCase(io, value, "gfx90a", AMDGPU::Processor::gfx90a);
@@ -218,9 +219,17 @@ namespace Tensile
                 iot::enumCase(io, value, "gfx1011", AMDGPU::Processor::gfx1011);
                 iot::enumCase(io, value, "gfx1012", AMDGPU::Processor::gfx1012);
                 iot::enumCase(io, value, "gfx1030", AMDGPU::Processor::gfx1030);
+                iot::enumCase(io, value, "gfx1031", AMDGPU::Processor::gfx1031);
+                iot::enumCase(io, value, "gfx1032", AMDGPU::Processor::gfx1032);
+                iot::enumCase(io, value, "gfx1034", AMDGPU::Processor::gfx1034);
+                iot::enumCase(io, value, "gfx1035", AMDGPU::Processor::gfx1035);
+                iot::enumCase(io, value, "gfx1036", AMDGPU::Processor::gfx1036);
                 iot::enumCase(io, value, "gfx1100", AMDGPU::Processor::gfx1100);
                 iot::enumCase(io, value, "gfx1101", AMDGPU::Processor::gfx1101);
                 iot::enumCase(io, value, "gfx1102", AMDGPU::Processor::gfx1102);
+                iot::enumCase(io, value, "gfx1103", AMDGPU::Processor::gfx1103);
+                iot::enumCase(io, value, "gfx1150", AMDGPU::Processor::gfx1150);
+                iot::enumCase(io, value, "gfx1151", AMDGPU::Processor::gfx1151);
                 iot::enumCase(io, value, "gfx1200", AMDGPU::Processor::gfx1200);
                 iot::enumCase(io, value, "gfx1201", AMDGPU::Processor::gfx1201);
             }
diff --git a/tensilelite/Tensile/Source/lib/source/ocl/OclUtils.cpp b/tensilelite/Tensile/Source/lib/source/ocl/OclUtils.cpp
index 4e86c8c9..e141b866 100644
--- a/tensilelite/Tensile/Source/lib/source/ocl/OclUtils.cpp
+++ b/tensilelite/Tensile/Source/lib/source/ocl/OclUtils.cpp
@@ -136,6 +136,10 @@ namespace Tensile
             {
                 return AMDGPU::Processor::gfx900;
             }
+            else if(deviceString.find("gfx902") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx902;
+            }
             else if(deviceString.find("gfx906") != std::string::npos)
             {
                 return AMDGPU::Processor::gfx906;
@@ -176,6 +180,26 @@ namespace Tensile
             {
                 return AMDGPU::Processor::gfx1030;
             }
+            else if(deviceString.find("gfx1031") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1031;
+            }
+            else if(deviceString.find("gfx1032") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1032;
+            }
+            else if(deviceString.find("gfx1034") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1034;
+            }
+            else if(deviceString.find("gfx1035") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1035;
+            }
+            else if(deviceString.find("gfx1036") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1036;
+            }
             else if(deviceString.find("gfx1100") != std::string::npos)
             {
                 return AMDGPU::Processor::gfx1100;
@@ -188,6 +212,18 @@ namespace Tensile
             {
                 return AMDGPU::Processor::gfx1102;
             }
+            else if(deviceString.find("gfx1103") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1103;
+            }
+            else if(deviceString.find("gfx1150") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1150;
+            }
+            else if(deviceString.find("gfx1151") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1151;
+            }
             else if(deviceString.find("gfx1200") != std::string::npos)
             {
                 return AMDGPU::Processor::gfx1200;
diff --git a/tensilelite/Tensile/Source/memory_gfx.h b/tensilelite/Tensile/Source/memory_gfx.h
index 8d29db18..262dde8d 100644
--- a/tensilelite/Tensile/Source/memory_gfx.h
+++ b/tensilelite/Tensile/Source/memory_gfx.h
@@ -44,10 +44,13 @@
     || defined(__gfx942__) // test device
 #define USE_GFX_BUFFER_INTRINSIC
 #define BUFFER_RESOURCE_3RD_DWORD 0x00020000
-#elif defined(__gfx1030__) // special device
+#elif defined(__gfx1010__) || defined(__gfx1011__) || defined(__gfx1012__) || \
+      defined(__gfx1030__) || defined(__gfx1031__) || defined(__gfx1032__) || defined(__gfx1034__) || \
+      defined(__gfx1035__) || defined(__gfx1036__) // special device
 #define USE_GFX_BUFFER_INTRINSIC
 #define BUFFER_RESOURCE_3RD_DWORD 0x31014000
-#elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__)
+#elif defined(__gfx1100__) || defined(__gfx1101__) || defined(__gfx1102__) || defined(__gfx1103__) || \
+      defined(__gfx1150__) || defined(__gfx1151__) // for GPU code
 #define USE_GFX_BUFFER_INTRINSIC
 #define BUFFER_RESOURCE_3RD_DWORD 0x31004000
 #elif defined(__gfx1200__) || defined(__gfx1201__)
-- 
2.48.1

